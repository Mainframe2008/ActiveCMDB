.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "CGI::FormBuilder::Template::CGI_SSI 3"
.TH CGI::FormBuilder::Template::CGI_SSI 3 "2011-09-16" "perl v5.16.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
CGI::FormBuilder::Template::CGI_SSI \- FormBuilder interface to CGI::SSI
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 7
\&    my $form = CGI::FormBuilder\->new(
\&                    fields   => \e@fields,
\&                    template => {
\&                      type => \*(AqCGI_SSI\*(Aq,
\&                      file => "template.html",
\&                    },
\&               );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This engine adapts \fBFormBuilder\fR to use \f(CW\*(C`CGI::SSI\*(C'\fR.
.PP
You can specify any options which \f(CW\*(C`CGI::SSI\->new\*(C'\fR
accepts by using a hashref:
.PP
.Vb 8
\&    my $form = CGI::FormBuilder\->new(
\&                    fields => \e@fields,
\&                    template => {
\&                        type => \*(AqCGI::SSI\*(Aq,
\&                        file => \*(Aqform.shtml\*(Aq,
\&                        sizefmt => \*(Aqabbrev\*(Aq
\&                    }
\&                );
.Ve
.PP
In addition to \s-1CGI::SSI\s0 \fBnew\fR arguments, you can also
specify \f(CW\*(C`file\*(C'\fR, \f(CW\*(C`virtual\*(C'\fR, or \f(CW\*(C`string\*(C'\fR argument.
.PP
The following methods are provided (usually only used internally):
.SS "engine"
.IX Subsection "engine"
Returns a reference to the \f(CW\*(C`CGI::SSI\*(C'\fR object
.SS "prepare"
.IX Subsection "prepare"
Returns a hash of all the fields ready to be rendered.
.SS "render"
.IX Subsection "render"
Uses the prepared hash and expands the template, returning a string of \s-1HTML\s0.
.SH "TEMPLATES"
.IX Header "TEMPLATES"
In your template, each of the form fields will correspond directly to
a \f(CW\*(C`<!\-\-#echo \-\->\*(C'\fR of the same name prefixed with \*(L"field\-\*(R" in the
template. So, if you defined a field called \*(L"email\*(R", then you would
setup a variable called \f(CW\*(C`<!\-\-#echo var="field\-email" \-\->\*(C'\fR in your template.
.PP
In addition, there are a couple special fields:
.PP
.Vb 6
\&    <!\-\-#echo var="js\-head" \-\->     \-  JavaScript to stick in <head>
\&    <!\-\-#echo var="form\-title" \-\->  \-  The <title> of the HTML form
\&    <!\-\-#echo var="form\-start" \-\->  \-  Opening <form> tag and internal fields
\&    <!\-\-#echo var="form\-submit" \-\-> \-  The submit button(s)
\&    <!\-\-#echo var="form\-reset" \-\->  \-  The reset button
\&    <!\-\-#echo var="form\-end" \-\->    \-  Just the closing </form> tag
.Ve
.PP
Let's look at an example \f(CW\*(C`form.html\*(C'\fR template we could use:
.PP
.Vb 10
\&    <html>
\&    <head>
\&    <title>User Information</title>
\&    <!\-\-#echo var="js\-head" \-\-><!\-\- this holds the JavaScript code \-\->
\&    </head>
\&    <!\-\-#echo var="form\-start" \-\-><!\-\- this holds the initial form tag \-\->
\&    <h3>User Information</h3>
\&    Please fill out the following information:
\&    <!\-\- each of these <!\-\-#echo \-\->\*(Aqs corresponds to a field \-\->
\&    <p>Your full name: <!\-\-#echo var="field\-name" \-\->
\&    <p>Your email address: <!\-\-#echo var="field\-email" \-\->
\&    <p>Choose a password: <!\-\-#echo var="field\-password" \-\->
\&    <p>Please confirm it: <!\-\-#echo var="field\-confirm_password\-\->
\&    <p>Your home zipcode: <!\-\-#echo var="field\-zipcode \-\->
\&    <p>
\&    <!\-\-#echo var="form\-submit" \-\-><!\-\- this holds the form submit button \-\->
\&    </form><!\-\- can also use "tmpl_var form\-end", same thing \-\->
.Ve
.PP
As you see, you get a \f(CW\*(C`<!\-\-#echo \-\->\*(C'\fR for each for field you define.
.PP
However, you may want even more control. That is, maybe you want
to specify every nitty-gritty detail of your input fields, and
just want this module to take care of the statefulness of the
values. This is no problem, since this module also provides
several other \f(CW\*(C`<tmpl_var>\*(C'\fR tags as well:
.PP
.Vb 5
\&    <!\-\-#echo var="value\-[field] \-\->   \- The value of a given field
\&    <!\-\-#echo var="label\-[field] \-\->   \- The human\-readable label
\&    <!\-\-#echo var="comment\-[field] \-\-> \- Any optional comment
\&    <!\-\-#echo var="error\-[field] \-\->   \- Error text if validation fails
\&    <!\-\-#echo var="required\-[field] \-\-> \- See if the field is required
.Ve
.PP
This means you could say something like this in your template:
.PP
.Vb 3
\&    <!\-\-#echo var="label\-email" \-\->:
\&    <input type="text" name="email" value="<!\-\-#echo var="value\-email" \-\->">
\&    <font size="\-1"><i><!\-\-#echo var="error\-email" \-\-></i></font>
.Ve
.PP
And \fBFormBuilder\fR would take care of the value stickiness for you,
while you have control over the specifics of the \f(CW\*(C`<input>\*(C'\fR tag.
A sample expansion may create \s-1HTML\s0 like the following:
.PP
.Vb 3
\&    Email:
\&    <input type="text" name="email" value="nate@wiger.org">
\&    <font size="\-1"><i>You must enter a valid value</i></font>
.Ve
.PP
Note, though, that this will only get the \fIfirst\fR value in the case
of a multi-value parameter (for example, a multi-select list).
Multiple values (loops) in \f(CW\*(C`CGI_SSI\*(C'\fR are not yet implemented.
.PP
For more information on templates, see HTML::Template.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
CGI::FormBuilder, CGI::FormBuilder::Template, HTML::Template
.SH "REVISION"
.IX Header "REVISION"
\&\f(CW$Id:\fR \s-1HTML\s0.pm 97 2007\-02\-06 17:10:39Z nwiger $
.SH "AUTHOR"
.IX Header "AUTHOR"
Copyright (c) Nate Wiger <http://nateware.com>. All Rights Reserved.
.PP
This module is free software; you may copy this under the terms of
the \s-1GNU\s0 General Public License, or the Artistic License, copies of
which should have accompanied your Perl kit.
