.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "CGI::FormBuilder::Template::Fast 3"
.TH CGI::FormBuilder::Template::Fast 3 "2011-09-16" "perl v5.16.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
CGI::FormBuilder::Template::Fast \- FormBuilder interface to CGI::FastTemplate
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 10
\&    my $form = CGI::FormBuilder\->new(
\&        fields   => \e@whatever,
\&        template => {
\&            type => \*(AqFast\*(Aq,
\&            root => \*(Aq/path/to/templates\*(Aq,
\&            # use external files
\&            define => {
\&                form           => \*(Aqform.txt\*(Aq,
\&                field          => \*(Aqfield.txt\*(Aq,
\&                invalid_field  => \*(Aqinvalid_field.txt\*(Aq,
\&            },
\&            # or define inline
\&            define_nofile => {
\&                form => \*(Aq<html><head></head><body>$START_FORM
\&                         <table>$FIELDS</table>$SUBMIT $END_FORM</body></html>\*(Aq,
\&                # etc.
\&            },
\&        },
\&   );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This engine adapts \fBFormBuilder\fR to use \f(CW\*(C`CGI::FastTemplate\*(C'\fR. Please
read these docs carefully, as the usage differs from other template
adapters in several important ways.
.PP
You will need to define three templates: \f(CW\*(C`form\*(C'\fR, \f(CW\*(C`field\*(C'\fR, and
\&\f(CW\*(C`invalid_field\*(C'\fR. You can use \f(CW\*(C`define\*(C'\fR to point to external files
(which is the recommended \f(CW\*(C`CGI::FastTemplate\*(C'\fR style), or \f(CW\*(C`define_nofile\*(C'\fR/
\&\f(CW\*(C`define_raw\*(C'\fR to define them inline. The templates in \f(CW\*(C`define_nofile\*(C'\fR
take precedence over \f(CW\*(C`define_raw\*(C'\fR, and both of these take precedence
over \f(CW\*(C`define\*(C'\fR.
.PP
.Vb 10
\&    my $form = CGI::FormBuilder\->new(
\&        # ...
\&        template => {
\&            type => \*(AqFastTemplate\*(Aq,
\&            root => \*(Aq/path/to/templates\*(Aq,
\&            define => {
\&                form           => \*(Aqform.txt\*(Aq,
\&                field          => \*(Aqfield.txt\*(Aq,
\&                invalid_field  => \*(Aqinvalid_field.txt\*(Aq,
\&            },
\&            # or, you can define templates directly
\&            define_nofile => {
\&                form => \*(Aq<html><head></head><body>$START_FORM<table>\*(Aq
\&                        \*(Aq$FIELDS</table>$SUBMIT $END_FORM</body></html>\*(Aq,
\&                # etc.
\&            },
\&        },
\&        # ...
\&    );
.Ve
.PP
If you use \f(CW\*(C`define\*(C'\fR with external templates, you will probably
also want to define your template root directory with the \f(CW\*(C`root\*(C'\fR
parameter.
.PP
Within each of the field templates, the following variables
are available:
.PP
.Vb 7
\&    $NAME         # $field\->name
\&    $FIELD        # $field\->tag   (HTML input tag)
\&    $VALUE        # $field\->value (first value only!)
\&    $LABEL        # $field\->label
\&    $COMMENT      # $field\->comment
\&    $ERROR        # $field\->error
\&    $REQUIRED     # $field\->required ? \*(Aqrequired\*(Aq : \*(Aqoptional\*(Aq
.Ve
.PP
All the fields are processed in sequence; valid fields use the 
\&\f(CW\*(C`field\*(C'\fR template, and invalid fields the \f(CW\*(C`invalid_field\*(C'\fR template.
The result from each of these is appended into the \f(CW$FIELDS\fR
variable, which you should use in your \f(CW\*(C`form\*(C'\fR template. In the 
\&\f(CW\*(C`form\*(C'\fR template, you also have access to these variables:
.PP
.Vb 6
\&    $TITLE        # title of the form
\&    $START_FORM   # opening form tag
\&    $SUBMIT       # the submit button
\&    $RESET        # the reset button
\&    $END_FORM     # closing form tag
\&    $JS_HEAD      # validation JavaScript
.Ve
.PP
Note that since \f(CW\*(C`CGI::FastTemplate\*(C'\fR doesn't use anything other than 
simple scalar variables, there are no variables corrosponding to 
the lists that other engines have (e.g. \f(CW\*(C`fields\*(C'\fR or \f(CW\*(C`options\*(C'\fR 
lists in \f(CW\*(C`TT2\*(C'\fR or \f(CW\*(C`Text::Template\*(C'\fR).
.SH "SEE ALSO"
.IX Header "SEE ALSO"
CGI::FormBuilder, CGI::FormBuilder::Template, CGI::FastTemplate
.SH "AUTHOR"
.IX Header "AUTHOR"
Copyright (c) 2005\-2006 Peter Eichman <peichman@cpan.org>. All Rights Reserved.
.PP
Maintained as part of \f(CW\*(C`CGI::FormBuilder\*(C'\fR by Nate Wiger <nate@wiger.org>.
.PP
This module is free software; you may copy this under the terms of
the \s-1GNU\s0 General Public License, or the Artistic License, copies of
which should have accompanied your Perl kit.
