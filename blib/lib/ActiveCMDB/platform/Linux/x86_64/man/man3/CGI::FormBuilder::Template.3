.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "CGI::FormBuilder::Template 3"
.TH CGI::FormBuilder::Template 3 "2011-09-16" "perl v5.16.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
CGI::FormBuilder::Template \- Template adapters for FormBuilder
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    # Define a template engine
\&
\&    package CGI::FormBuilder::Template::Whatever;
\&    use base \*(AqWhatever::Template::Module\*(Aq;
\&
\&    sub new {
\&        my $self  = shift;
\&        my $class = ref($self) || $self;
\&        my %opt   = @_;
\&
\&        # override some options
\&        $opt{some_setting} = 0;
\&        $opt{another_var}  = \*(AqSome Value\*(Aq;
\&
\&        # instantiate the template engine
\&        $opt{engine} = Whatever::Template::Module\->new(%opt);
\&
\&        return bless \e%opt, $class;
\&    }
\&
\&    sub render {
\&        my $self = shift;
\&        my $form = shift;   # only arg is form object
\&
\&        # grab any manually\-set template params
\&        my %tmplvar = $form\->tmpl_param;
\&
\&        # example template manipulation
\&        my $html = $self\->{engine}\->do_template(%tmplvar);
\&
\&        return $html;       # scalar HTML is returned
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This documentation describes the usage of \fBFormBuilder\fR templates,
as well as how to write your own template adapter.
.PP
The template engines serve as adapters between \s-1CPAN\s0 template modules
and \fBFormBuilder\fR. A template engine is invoked by using the \f(CW\*(C`template\*(C'\fR
option to the top-level \f(CW\*(C`new()\*(C'\fR method:
.PP
.Vb 3
\&    my $form = CGI::FormBuilder\->new(
\&                    template => \*(Aqfilename.tmpl\*(Aq
\&               );
.Ve
.PP
This example points to a filename that contains an \f(CW\*(C`HTML::Template\*(C'\fR
compatible template to use to layout the \s-1HTML\s0. You can also specify
the \f(CW\*(C`template\*(C'\fR option as a reference to a hash, allowing you to
further customize the template processing options, or use other
template engines.
.PP
For example, you could turn on caching in \f(CW\*(C`HTML::Template\*(C'\fR with
something like the following:
.PP
.Vb 7
\&    my $form = CGI::FormBuilder\->new(
\&                    fields => \e@fields,
\&                    template => {
\&                        filename => \*(Aqform.tmpl\*(Aq,
\&                        shared_cache => 1
\&                    }
\&               );
.Ve
.PP
As mentioned, specifying a hashref allows you to use an alternate template
processing system like the \f(CW\*(C`Template Toolkit\*(C'\fR.  A minimal configuration
would look like this:
.PP
.Vb 7
\&    my $form = CGI::FormBuilder\->new(
\&                    fields => \e@fields,
\&                    template => {
\&                        type => \*(AqTT2\*(Aq,      # use Template Toolkit
\&                        template => \*(Aqform.tmpl\*(Aq,
\&                    },
\&               );
.Ve
.PP
The \f(CW\*(C`type\*(C'\fR option specifies the name of the engine. Currently accepted
types are:
.PP
.Vb 7
\&    Builtin \-  Included, default rendering if no template specified
\&    Div     \-  Render form using <div> (no tables)
\&    HTML    \-  HTML::Template
\&    Text    \-  Text::Template
\&    TT2     \-  Template Toolkit
\&    Fast    \-  CGI::FastTemplate
\&    CGI_SSI \-  CGI::SSI
.Ve
.PP
In addition to one of these types, you can also specify a complete package name,
in which case that module will be autoloaded and its \f(CW\*(C`new()\*(C'\fR and \f(CW\*(C`render()\*(C'\fR
routines used. For example:
.PP
.Vb 7
\&    my $form = CGI::FormBuilder\->new(
\&                    fields => \e@fields,
\&                    template => {
\&                        type => \*(AqMy::Template::Module\*(Aq,
\&                        template => \*(Aqform.tmpl\*(Aq,
\&                    },
\&               );
.Ve
.PP
All other options besides \f(CW\*(C`type\*(C'\fR are passed to the constructor for that
templating system verbatim, so you'll need to consult those docs to see what
all the different options do. Skip down to \*(L"\s-1SEE\s0 \s-1ALSO\s0\*(R".
.SH "SUBCLASSING TEMPLATE ADAPTERS"
.IX Header "SUBCLASSING TEMPLATE ADAPTERS"
In addition to the above included template engines, it is also possible to write
your own rendering module. If you come up with something cool, please let the
mailing list know!
.PP
To do so, you need to write a module which has a sub called \f(CW\*(C`render()\*(C'\fR. This
sub will be called by \fBFormBuilder\fR when \f(CW\*(C`$form\->render\*(C'\fR is called. This
sub can do basically whatever it wants, the only thing it has to do is return
a scalar string which is the \s-1HTML\s0 to print out.
.PP
This is actually not hard. Here's a simple adapter which would manipulate
an \f(CW\*(C`HTML::Template\*(C'\fR style template:
.PP
.Vb 2
\&    # This file is My/HTML/Template.pm
\&    package My::HTML::Template;
\&
\&    use CGI::FormBuilder::Template::HTML;
\&    use base \*(AqCGI::FormBuilder::Template::HTML\*(Aq;
\&
\&    sub render {
\&        my $self = shift;    # class object
\&        my $form = shift;    # $form as only argument
\&
\&        # the template object (engine) lives here
\&        my $tmpl = $self\->engine;
\&
\&        # setup vars for our fields (objects)
\&        for ($form\->field) {
\&            $tmpl\->param($_ => $_\->value);
\&        }
\&
\&        # render output
\&        my $html = $tmpl\->output;
\&
\&        # return scalar;
\&        return $html;
\&    }
\&    1;  # close module
.Ve
.PP
Then in \fBFormBuilder\fR:
.PP
.Vb 2
\&    use CGI::FormBuilder;
\&    use My::HTML::Template;   # your module
\&
\&    my $tmpl = My::HTML::Template\->new;
\&
\&    my $form = CGI::FormBuilder\->new(
\&                    fields   => [qw(name email)],
\&                    header   => 1,
\&                    template => $tmpl   # pass template object
\&               );
\&
\&    # set our company from an extra CGI param
\&    my $co = $form\->cgi_param(\*(Aqcompany\*(Aq);
\&    $tmpl\->engine\->param(company => $co);
\&
\&    # and render like normal
\&    print $form\->render;
.Ve
.PP
That's it! For more details, the best thing to do is look through
the guts of one of the existing template engines and go from there.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
CGI::FormBuilder, CGI::FormBuilder::Template::HTML,
CGI::FormBuilder::Template::Text, CGI::FormBuilder::Template::TT2,
CGI::FormBuilder::Template::Fast, CGI::FormBuilder::Template::CGI_SSI
.SH "REVISION"
.IX Header "REVISION"
\&\f(CW$Id:\fR Template.pm 97 2007\-02\-06 17:10:39Z nwiger $
.SH "AUTHOR"
.IX Header "AUTHOR"
Copyright (c) Nate Wiger <http://nateware.com>. All Rights Reserved.
.PP
This module is free software; you may copy this under the terms of
the \s-1GNU\s0 General Public License, or the Artistic License, copies of
which should have accompanied your Perl kit.
