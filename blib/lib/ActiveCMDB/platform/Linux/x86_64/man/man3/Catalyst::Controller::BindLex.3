.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Catalyst::Controller::BindLex 3"
.TH Catalyst::Controller::BindLex 3 "2008-05-27" "perl v5.16.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Catalyst::Controller::BindLex \- Unmaintained, dangerous proof of concept
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    package MyApp::Controller::Moose;
\&    use base qw/Catalyst::Controller::BindLex/;
\&
\&    sub bar : Local {
\&        my ( $self, $c ) = @_;
\&
\&        my $x : Stashed;
\&        my %y : Stashed;
\&
\&        $x = 100;
\&        
\&        do_something( $c\->stash\->{x} ); # 100
\&    
\&        $c\->forward( "gorch" );
\&    }
\&
\&    sub gorch : Private {
\&        my ( $self, $c ) = @_;
\&        my $x : Stashed;
\&
\&        do_something( $x ); # still 100
\&    }
\&
\&    sub counter : Local {
\&        my ( $self, $c ) = @_;
\&        my $count : Session;
\&        $c\->res\->body( "request number " . ++$count );
\&    }
.Ve
.SH "WARNING"
.IX Header "WARNING"
Catalyst::Controller::BindLex does some fairly nasty magic \- the attribute
wrapping tricks are complex and will break if you declare the same lexical
name twice in the same method, and the approach to get \f(CW$c\fR out of the call
stack is hacky and fragile.
.PP
It was designed as a \s-1PROOF\s0 \s-1OF\s0 \s-1CONCEPT\s0 \s-1ONLY\s0 and should not be considered for
use in production. The authors no longer consider it a viable implementation
plan and \s-1THIS\s0 \s-1MODULE\s0 \s-1IS\s0 \s-1NOT\s0 \s-1SUPPORTED\s0 \s-1AND\s0 \s-1WILL\s0 \s-1NOT\s0 \s-1BE\s0 \s-1MAINTAINED\s0.
.PP
If you really want to use it, please read the source code and be sure you
understand it well enough to fix anything that goes wrong, then set
.PP
.Vb 1
\&    _\|_PACKAGE_\|_\->config\->{unsafe_bindlex_ok} = 1;
.Ve
.PP
in your controller class to suppress the startup warning.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This plugin lets you put your lexicals on the stash and elsewhere very easily.
.PP
It uses some funky modules to get its job done:  PadWalker,
Array::RefElem, Devel::Caller, Devel::LexAlias, and attributes. In
some people's opinion this hurts this plugin's reputation ;\-).
.PP
If you use the same name for two variables with the same storage binding
attribute they will be aliased to each other, so you can use this for reading
as well as writing values across controller subs. This is almost like sharing
your lexical scope.
.SH "WHY ISN'T THIS A PLUGIN?"
.IX Header "WHY ISN'T THIS A PLUGIN?"
The way attributes are handled this can't be a plugin \- the
\&\s-1MODIFY_SCALAR_ATTRIBUTES\s0 methods and friends need to be in the class where the
lexical is attributed, and this is typically a controller.
.SH "CONFIGURATION"
.IX Header "CONFIGURATION"
You can add attributes to the configaration by mapping attributes to handlers.
.PP
Handlers are either strings of methods to be called on \f(CW$c\fR with no arguments,
which are expected to return a hash reference (like \f(CW\*(C`stash\*(C'\fR, \f(CW\*(C`session\*(C'\fR, etc),
or code references invoked with \f(CW$c\fR, a reference to the variable we're
binding, and the name of the variable we're binding, also expected to return a
hash reference.
.SH "DEFAULT ATTRIBUTES"
.IX Header "DEFAULT ATTRIBUTES"
Some default attributes are pre-configured:
.IP "Stash, Stashed" 4
.IX Item "Stash, Stashed"
.PD 0
.IP "Session, Sessioned" 4
.IX Item "Session, Sessioned"
.IP "Flash, Flashed" 4
.IX Item "Flash, Flashed"
.PD
Bind the variable to a key in \f(CW\*(C`stash\*(C'\fR, \f(CW\*(C`session\*(C'\fR, or \f(CW\*(C`flash\*(C'\fR respectively.
.Sp
The latter two require the use of a session; see Catalyst::Plugin::Session.
.SH "METHODS"
.IX Header "METHODS"
.SS "bindlex_default_config( )"
.IX Subsection "bindlex_default_config( )"
.SS "\s-1MODIFY_ARRAY_ATTRIBUTES\s0( )"
.IX Subsection "MODIFY_ARRAY_ATTRIBUTES( )"
.SS "\s-1MODIFY_HASH_ATTRIBUTES\s0( )"
.IX Subsection "MODIFY_HASH_ATTRIBUTES( )"
.SS "\s-1MODIFY_SCALAR_ATTRIBUTES\s0( )"
.IX Subsection "MODIFY_SCALAR_ATTRIBUTES( )"
.SH "RECIPES"
.IX Header "RECIPES"
.IP "Param" 4
.IX Item "Param"
To get
.Sp
.Vb 1
\&    my $username : Param;
.Ve
.Sp
add
.Sp
.Vb 1
\&    _\|_PACKAGE_\|_\->config\->{bindlex}{Param} = sub { $_[0]\->req\->params };
.Ve
.SH "AUTHORS"
.IX Header "AUTHORS"
Matt S. Trout
.PP
Yuval Kogman
.SH "SEE ALSO"
.IX Header "SEE ALSO"
PadWalker, Array::RefElem, Devel::Caller, Devel::LexAlias, Sub::Parameters
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
.Vb 3
\&        Copyright (c) 2005 the aforementioned authors. All rights
\&        reserved. This program is free software; you can redistribute
\&        it and/or modify it under the same terms as Perl itself.
.Ve
