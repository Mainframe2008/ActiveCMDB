.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "CGI::FormBuilder::Template::TT2 3"
.TH CGI::FormBuilder::Template::TT2 3 "2011-09-16" "perl v5.16.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
CGI::FormBuilder::Template::TT2 \- FormBuilder interface to Template Toolkit
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 8
\&    my $form = CGI::FormBuilder\->new(
\&                    fields   => \e@fields,
\&                    template => {
\&                        type => \*(AqTT2\*(Aq,
\&                        template => \*(Aqform.tmpl\*(Aq,
\&                        variable => \*(Aqform\*(Aq,
\&                    }
\&               );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This engine adapts \fBFormBuilder\fR to use \f(CW\*(C`Template Toolkit\*(C'\fR.  To do so, 
specify the \f(CW\*(C`template\*(C'\fR option as a hashref which includes the \f(CW\*(C`type\*(C'\fR
option set to \f(CW\*(C`TT2\*(C'\fR and the \f(CW\*(C`template\*(C'\fR option set to the name of the
template you want processed. You can also add \f(CW\*(C`variable\*(C'\fR as an option
(among others) to denote the variable name that you want the form data
to be referenced by:
.PP
.Vb 8
\&    my $form = CGI::FormBuilder\->new(
\&                    fields => \e@fields,
\&                    template => {
\&                        type => \*(AqTT2\*(Aq,
\&                        template => \*(Aquserinfo.tmpl\*(Aq,
\&                        variable => \*(Aqform\*(Aq,
\&                    }
\&               );
.Ve
.PP
The following methods are provided (usually only used internally):
.SS "engine"
.IX Subsection "engine"
Returns a reference to the \f(CW\*(C`Template\*(C'\fR object
.SS "prepare"
.IX Subsection "prepare"
Returns a hash of all the fields ready to be rendered.
.SS "render"
.IX Subsection "render"
Uses the prepared hash and expands the template, returning a string of \s-1HTML\s0.
.SH "TEMPLATES"
.IX Header "TEMPLATES"
The template might look something like this:
.PP
.Vb 10
\&    <html>
\&    <head>
\&      <title>[% form.title %]</title>
\&      [% form.jshead %]
\&    </head>
\&    <body>
\&      [% form.start %]
\&      <table>
\&        [% FOREACH field = form.fields %]
\&        <tr valign="top">
\&          <td>
\&            [% field.required
\&                  ? "<b>$field.label</b>"
\&                  : field.label
\&            %]
\&          </td>
\&          <td>
\&            [% IF field.invalid %]
\&            Missing or invalid entry, please try again.
\&        <br/>
\&        [% END %]
\&
\&        [% field.field %]
\&      </td>
\&    </tr>
\&        [% END %]
\&        <tr>
\&          <td colspan="2" align="center">
\&            [% form.submit %] [% form.reset %]
\&          </td>
\&        </tr>
\&      </table>
\&      [% form.end %]
\&    </body>
\&    </html>
.Ve
.PP
By default, the Template Toolkit makes all the form and field
information accessible through simple variables.
.PP
.Vb 8
\&    [% jshead %]  \-  JavaScript to stick in <head>
\&    [% title  %]  \-  The <title> of the HTML form
\&    [% start  %]  \-  Opening <form> tag and internal fields
\&    [% submit %]  \-  The submit button(s)
\&    [% reset  %]  \-  The reset button
\&    [% end    %]  \-  Closing </form> tag
\&    [% fields %]  \-  List of fields
\&    [% field  %]  \-  Hash of fields (for lookup by name)
.Ve
.PP
You can specify the \f(CW\*(C`variable\*(C'\fR option to have all these variables
accessible under a certain namespace.  For example:
.PP
.Vb 8
\&    my $form = CGI::FormBuilder\->new(
\&        fields => \e@fields,
\&        template => {
\&             type => \*(AqTT2\*(Aq,
\&             template => \*(Aqform.tmpl\*(Aq,
\&             variable => \*(Aqform\*(Aq
\&        },
\&    );
.Ve
.PP
With \f(CW\*(C`variable\*(C'\fR set to \f(CW\*(C`form\*(C'\fR the variables are accessible as:
.PP
.Vb 3
\&    [% form.jshead %]
\&    [% form.start  %]
\&    etc.
.Ve
.PP
You can access individual fields via the \f(CW\*(C`field\*(C'\fR variable.
.PP
.Vb 5
\&    For a field named...  The field data is in...
\&    \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&    job                   [% form.field.job   %]
\&    size                  [% form.field.size  %]
\&    email                 [% form.field.email %]
.Ve
.PP
Each field contains various elements.  For example:
.PP
.Vb 1
\&    [% myfield = form.field.email %]
\&
\&    [% myfield.label    %]  # text label
\&    [% myfield.field    %]  # field input tag
\&    [% myfield.value    %]  # first value
\&    [% myfield.values   %]  # list of all values
\&    [% myfield.option   %]  # first value
\&    [% myfield.options  %]  # list of all values
\&    [% myfield.required %]  # required flag
\&    [% myfield.invalid  %]  # invalid flag
.Ve
.PP
The \f(CW\*(C`fields\*(C'\fR variable contains a list of all the fields in the form.
To iterate through all the fields in order, you could do something like
this:
.PP
.Vb 5
\&    [% FOREACH field = form.fields %]
\&    <tr>
\&     <td>[% field.label %]</td> <td>[% field.field %]</td>
\&    </tr>
\&    [% END %]
.Ve
.PP
If you want to customise any of the Template Toolkit options, you can
set the \f(CW\*(C`engine\*(C'\fR option to contain a reference to an existing
\&\f(CW\*(C`Template\*(C'\fR object or hash reference of options which are passed to
the \f(CW\*(C`Template\*(C'\fR constructor.  You can also set the \f(CW\*(C`data\*(C'\fR item to
define any additional variables you want accesible when the template
is processed.
.PP
.Vb 10
\&    my $form = CGI::FormBuilder\->new(
\&        fields => \e@fields,
\&        template => {
\&             type => \*(AqTT2\*(Aq,
\&             template => \*(Aqform.tmpl\*(Aq,
\&             variable => \*(Aqform\*(Aq,
\&             engine   => {
\&                  INCLUDE_PATH => \*(Aq/usr/local/tt2/templates\*(Aq,
\&             },
\&             data => {
\&                  version => 1.23,
\&                  author  => \*(AqFred Smith\*(Aq,
\&             },
\&        },
\&    );
.Ve
.PP
For further details on using the Template Toolkit, see \f(CW\*(C`Template\*(C'\fR or
http://www.template\-toolkit.org <http://www.template-toolkit.org>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
CGI::FormBuilder, CGI::FormBuilder::Template, Template
.SH "REVISION"
.IX Header "REVISION"
\&\f(CW$Id:\fR \s-1TT2\s0.pm 100 2007\-03\-02 18:13:13Z nwiger $
.SH "AUTHOR"
.IX Header "AUTHOR"
Copyright (c) Nate Wiger <http://nateware.com>. All Rights Reserved.
.PP
Template Tookit support is largely due to a huge patch from Andy Wardley.
.PP
This module is free software; you may copy this under the terms of
the \s-1GNU\s0 General Public License, or the Artistic License, copies of
which should have accompanied your Perl kit.
